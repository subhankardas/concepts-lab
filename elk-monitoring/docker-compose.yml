version: "3.0"

services:
  # elasticsearch nodes - search and analytics engine
  elasticsearch-n1:
    container_name: elasticsearch-n1
    image: docker.elastic.co/elasticsearch/elasticsearch:${ELK_VERSION}
    environment:
      - node.name=elasticsearch-n1
      - cluster.name=${CLUSTER_NAME}
      - "discovery.type=single-node"
      - xpack.security.enabled=true
      - ELASTIC_USERNAME=${ELASTIC_USERNAME}
      - ELASTIC_PASSWORD=${ELASTIC_PASSWORD}
    volumes:
      - elasticsearch-n1-data:/usr/share/elasticsearch/data
    networks:
      - elk-network
    ports:
      - 9200:9200

  # kibana - data visualization and exploration tool
  kibana:
    container_name: kibana
    image: docker.elastic.co/kibana/kibana:${ELK_VERSION}
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-n1:9200
      - xpack.security.enabled=true
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
    networks:
      - elk-network
    depends_on:
      - elasticsearch-n1
    ports:
      - 5601:5601

  # metricbeat - service metrics data shipper
  metricbeat:
    container_name: metricbeat
    image: docker.elastic.co/beats/metricbeat:${ELK_VERSION}
    user: root
    environment:
      - ELASTICSEARCH_HOSTS=http://elasticsearch-n1:9200
      - ELASTICSEARCH_USERNAME=${ELASTIC_USERNAME}
      - ELASTICSEARCH_PASSWORD=${ELASTIC_PASSWORD}
      - KIBANA_HOST=http://kibana:5601
    volumes:
      - metricbeat-data:/usr/share/metricbeat/data
      - type: bind
        source: ./metricbeat/metricbeat.yml
        target: /usr/share/metricbeat/metricbeat.yml
        read_only: true
      - /var/lib/docker:/var/lib/docker:ro
      - /var/run/docker.sock:/var/run/docker.sock
      - /proc:/hostfs/proc:ro
      - /sys/fs/cgroup:/hostfs/sys/fs/cgroup:ro
      - /:/hostfs:ro
    command: ["--strict.perms=false", "-system.hostfs=/hostfs"]
    networks:
      - elk-network
    depends_on:
      - elasticsearch-n1
      - kibana

  # zookeeper - synchronization
  zookeeper:
    container_name: zookeeper
    image: confluentinc/cp-zookeeper:${KAFKA_VERSION}
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
      - zookeeper-data:/var/lib/zookeeper/log
      - zookeeper-data:/etc/zookeeper/secrets
    ports:
      - 2181:2181
    networks:
      - elk-network

  # kafka - message broker
  kafka:
    container_name: kafka
    image: confluentinc/cp-kafka:${KAFKA_VERSION}
    ports:
      - 19092:19092
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: "true"
    volumes:
      - kafka-data:/var/lib/kafka/data
      - kafka-data:/etc/kafka/secrets
    networks:
      - elk-network

volumes:
  elasticsearch-n1-data:
    driver: local
  metricbeat-data:
    driver: local
  zookeeper-data:
    driver: local
  kafka-data:
    driver: local

networks:
  elk-network:
    driver: bridge
